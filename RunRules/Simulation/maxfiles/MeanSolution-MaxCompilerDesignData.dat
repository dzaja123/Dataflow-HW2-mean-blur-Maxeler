#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "MeanSolution"
#define MAXFILE_BUILD_DIR  "/tmp/MeanSolution_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20231124
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 39)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "MeanSolutionKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(MeanSolutionKernel, Kernel)
MANAGER_NODE(inImage, PCIe_From_Host_fwd)
MANAGER_NODE(outImage, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(MeanSolutionKernel, inImage, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(MeanSolutionKernel, outImage, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inImage, inImage, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(outImage, outImage, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inImage, inImage, Stream_1, input, 128)
MANAGER_STREAM(MeanSolutionKernel, outImage, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, outImage, outImage, 128)
MANAGER_STREAM(Stream_10, output, MeanSolutionKernel, inImage, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(MeanSolutionKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(inImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(outImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(MeanSolutionKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(MeanSolutionKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(MeanSolutionKernel, MeanSolutionKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(MeanSolutionKernel, inImage, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(MeanSolutionKernel, outImage, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage, PCIePullSourceSyncMax3, "inImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MeanSolutionKernel, MeanSolutionKernel, "MeanSolutionKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage, PCIePushSinkSyncMax3, "outImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 39)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "6c17b965656a0f47475bc92561e24224e445f176b29b0b2d8c0c0f84a11c59ff")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_fill_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_flush_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_flush_start_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_full_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MeanSolutionKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inImage, STREAM_FROM_HOST, 0)
PCIE_STREAM(outImage, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(MeanSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MeanSolutionKernel.io_outImage_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MeanSolutionKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MeanSolutionKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MeanSolutionKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(MeanSolutionKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_fill_level, 0x15, 2, hwBits(10))
REG(MeanSolutionKernel.dbg_flush_level, 0x17, 2, hwBits(10))
REG(MeanSolutionKernel.dbg_flush_start, 0x19, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_flush_start_level, 0x1a, 2, hwBits(10))
REG(MeanSolutionKernel.dbg_flushing, 0x1c, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_full_level, 0x1d, 2, hwBits(10))
REG(MeanSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1))
REG(MeanSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(MeanSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MeanSolutionKernel.io_outImage_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MeanSolutionKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(MeanSolutionKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_fill_level, 0x15, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_flush_level, 0x17, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_flush_start, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_flush_start_level, 0x1a, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_flushing, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_full_level, 0x1d, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MeanSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("6c17b965656a0f47475bc92561e24224e445f176b29b0b2d8c0c0f84a11c59ff")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME MeanSolution
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_MeanSolution_H
#define SLIC_DECLARATIONS_MeanSolution_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define MeanSolution_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] instream_inImage The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_size * 4) bytes.
 */
void MeanSolution(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] instream_inImage The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_size * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *MeanSolution_nonblock(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_size; /**<  [in] Interface Parameter "size". */
	const int32_t *instream_inImage; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	int32_t *outstream_outImage; /**<  [out] The stream should be of size (param_size * 4) bytes. */
} MeanSolution_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void MeanSolution_run(
	max_engine_t *engine,
	MeanSolution_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MeanSolution_run_nonblock(
	max_engine_t *engine,
	MeanSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MeanSolution_run_group(max_group_t *group, MeanSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MeanSolution_run_group_nonblock(max_group_t *group, MeanSolution_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MeanSolution_run_array(max_engarray_t *engarray, MeanSolution_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MeanSolution_run_array_nonblock(max_engarray_t *engarray, MeanSolution_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MeanSolution_convert(max_file_t *maxfile, MeanSolution_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* MeanSolution_init(void);

/* Error handling functions */
int MeanSolution_has_errors(void);
const char* MeanSolution_get_errors(void);
void MeanSolution_clear_errors(void);
/* Free statically allocated maxfile data */
void MeanSolution_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int MeanSolution_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int MeanSolution_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_MeanSolution_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(MeanSolutionKernel, 43, NodeInputMappedReg, "Scalar input (io_outImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:35)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 44, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:35)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 24, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChainMoreBits(Count.java:472)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:29)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 85, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x100; 256.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:31)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 28, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:31)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 84, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 30, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 83, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x0ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 32, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 33, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 59, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 82, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x100; 256.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:30)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 26, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:30)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 81, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 35, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 36, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 80, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x0ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 38, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 60, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 39, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:50)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 79, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:86)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:51)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 0, NodeInputMappedReg, "Scalar input (io_inImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:25)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:25)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 2, NodeInput, "Input(inImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:25)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 65, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 70, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 71, NodeFIFO, "FIFO(251)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 72, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 73, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 74, NodeFIFO, "FIFO(252)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 4, NodeStreamOffset, "stream offset: -257", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 6, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 7, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 8, NodeStreamOffset, "stream offset: 255", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 9, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 75, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 10, NodeStreamOffset, "stream offset: -256", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 11, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 13, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 14, NodeStreamOffset, "stream offset: 256", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 15, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 16, NodeStreamOffset, "stream offset: -255", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 67, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 17, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 18, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 19, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 20, NodeStreamOffset, "stream offset: 257", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 21, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:43)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 78, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000009; 9.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1029)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:46)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 23, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1029)\nmean.MeanSolutionKernel.calculateMeanBlur(MeanSolutionKernel.maxj:46)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:27)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 41, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nmean.MeanSolutionKernel.applyEdgeConditions(MeanSolutionKernel.maxj:51)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:33)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 46, NodeOutput, "Output(outImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nmean.MeanSolutionKernel.<init>(MeanSolutionKernel.maxj:35)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:23)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 51, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 77, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 48, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 49, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 50, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 52, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 76, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 54, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 55, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 57, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 58, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
PHOTON_NODE_DATA(MeanSolutionKernel, 56, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nmean.MeanSolutionManager.main(MeanSolutionManager.maxj:27)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int MeanSolution_has_errors(void)
{	return stored_has_error; }
const char* MeanSolution_get_errors(void)
{	return stored_error; }
void MeanSolution_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char MeanSolution_use_simulation[16];
static void MeanSolution_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(MeanSolution_use_simulation, 16, "MeanSolu_%05ld_", pid);
}
static const char *MeanSolution_check_use_simulation(void)
{
	MeanSolution_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = MeanSolution_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int MeanSolution_simulation_launch = 0;
int MeanSolution_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = MeanSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int MeanSolution_simulator_stop(void)
{
	const char *use_sim = MeanSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void MeanSolution_static_init(void) 
{
	stored_maxfile = MeanSolution_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = MeanSolution_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = MeanSolution_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			MeanSolution_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void MeanSolution_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (MeanSolution_simulation_launch == 1) {
		int sim_stat = MeanSolution_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		MeanSolution_simulation_launch = 0;
	}
}

static int MeanSolution_get_pcie_alignment(void)
{
#ifdef MeanSolution_PCIE_ALIGNMENT
	return ((MeanSolution_PCIE_ALIGNMENT < 1) ? 16 : MeanSolution_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int MeanSolution_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = MeanSolution_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *MeanSolution_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = MeanSolution_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct MeanSolution_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} MeanSolution_callback_stream_t;

typedef struct MeanSolution_callback_data {
	MeanSolution_callback_stream_t stream[2]; 
	int count;
	int max_count;
} MeanSolution_callback_data_t;

static void MeanSolution_callback_internal(void *cb_data)
{
	MeanSolution_callback_data_t *data = (MeanSolution_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		MeanSolution_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* MeanSolution_convert_internal(
	max_file_t *maxfile,
	MeanSolution_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	MeanSolution_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(MeanSolution_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function MeanSolution_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &MeanSolution_callback_internal;
	}

	int32_t param_size = interface_actions->param_size;
	
	/* code for scalar MeanSolutionKernel.run_cycle_count */
	uint64_t ticks_MeanSolutionKernel = param_size;
	max_set_ticks(actions, "MeanSolutionKernel", param_size);
	CHECK_ERRORS;
	/* end of code for scalar MeanSolutionKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_size * 4);
	
	/* code for stream inImage */
	size_t instream_size_inImage = tmp_0;
	if (instream_size_inImage > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage;
		if (use_callback && (1 == MeanSolution_check_aligned(interface_actions->instream_inImage))) {
			int32_t *aligned_instream_inImage = malloc(instream_size_inImage);
			if (aligned_instream_inImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage, interface_actions->instream_inImage, instream_size_inImage);
			stream_ptr = aligned_instream_inImage;
		}
		max_queue_input(actions, "inImage", stream_ptr, instream_size_inImage);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage */
	
	int64_t tmp_1 = (param_size * 4);
	
	/* code for stream outImage */
	size_t outstream_size_outImage = tmp_1;
	if (outstream_size_outImage > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage;
		if (use_callback && (1 == MeanSolution_check_aligned(interface_actions->outstream_outImage))) {
			int32_t *aligned_outstream_outImage = malloc(outstream_size_outImage);
			if (aligned_outstream_outImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage;
		}
		max_queue_output(actions, "outImage", stream_ptr, outstream_size_outImage);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void MeanSolution(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	(void) pthread_once(&slic_bs_is_initialised, MeanSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = MeanSolution_nonblock(param_size, instream_inImage, outstream_outImage);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MeanSolution_nonblock(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	MeanSolution_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.instream_inImage = instream_inImage;
	interface_actions.outstream_outImage = outstream_outImage;
	(void) pthread_once(&slic_bs_is_initialised, MeanSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MeanSolution_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void MeanSolution_run(
	max_engine_t *engine,
	MeanSolution_actions_t *interface_actions)
{
	max_run_t *run = MeanSolution_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MeanSolution_run_nonblock(
	max_engine_t *engine,
	MeanSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MeanSolution_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MeanSolution_run_group(max_group_t *group, MeanSolution_actions_t *interface_actions)
{
	max_run_t *run = MeanSolution_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MeanSolution_run_group_nonblock(max_group_t *group, MeanSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = MeanSolution_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MeanSolution_run_array(max_engarray_t *engarray, MeanSolution_actions_t *interface_actions[])
{
	max_run_t *run = MeanSolution_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MeanSolution_run_array_nonblock(max_engarray_t *engarray, MeanSolution_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = MeanSolution_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MeanSolution_convert(max_file_t *maxfile, MeanSolution_actions_t *interface_actions)
{
	return MeanSolution_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, size, param_size)	
SLIC_SET_TICKS(MeanSolutionKernel, param_size)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_size * 4);)	
SLIC_STREAM(inImage, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_size * 4);)	
SLIC_STREAM(outImage, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9Ik1lYW5Tb2x1dGlvbi5oIiBu
YW1lPSJNZWFuU29sdXRpb24iPjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIgdHlwZT0i
bG9uZyIgdmFsdWU9IjE2Ii8+PGVuZ2luZW1vZGUgbmFtZT0iZGVmYXVsdCI+PGZ1bmN0aW9uIG5h
bWU9Ik1lYW5Tb2x1dGlvbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVy
ZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7c2l6ZSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9
InBhcmFtX3NpemUiIHR5cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91
bGQgYmUgb2Ygc2l6ZSAocGFyYW1fc2l6ZSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIg
bmFtZT0iaW5zdHJlYW1faW5JbWFnZSIgc2l6ZT0iKHBhcmFtX3NpemUgKiA0KSIgdHJhbnNwb3Nl
PSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9z
aXplICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9
IioiIHZhbHVlPSIocGFyYW1fc2l6ZSAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9zaXpl
Ii8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rp
b25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUg
c3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9zaXplICogNCkgYnl0ZXMuIiBkaXJlY3Rp
b249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291dEltYWdlIiBzaXplPSIocGFyYW1fc2l6ZSAq
IDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9IjAi
PjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZh
bHVlPSIoKHBhcmFtX3NpemUgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVy
YXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9zaXplICogNCkiPjx1c2VyUGFyYW0gdmFs
dWU9InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3Bl
cmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFy
eU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9m
dW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBNZWFuU29sdXRpb25faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRfaGFz
X2Vycm9yOyB9CmNvbnN0IGNoYXIqIE1lYW5Tb2x1dGlvbl9nZXRfZXJyb3JzKHZvaWQpCnsJcmV0
dXJuIHN0b3JlZF9lcnJvcjsgfQp2b2lkIE1lYW5Tb2x1dGlvbl9jbGVhcl9lcnJvcnModm9pZCkK
ewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNf
ZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBNZWFuU29sdXRpb25fdXNlX3NpbXVsYXRpb25bMTZd
OwpzdGF0aWMgdm9pZCBNZWFuU29sdXRpb25fZGVmX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCWxv
bmcgcGlkID0gKChsb25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50ZihNZWFuU29sdXRp
b25fdXNlX3NpbXVsYXRpb24sIDE2LCAiTWVhblNvbHVfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMg
Y29uc3QgY2hhciAqTWVhblNvbHV0aW9uX2NoZWNrX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCU1l
YW5Tb2x1dGlvbl9kZWZfdXNlX3NpbXVsYXRpb24oKTsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBt
YXhfY29uZmlnX2dldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTik7CglpZiAodXNl
X3NpbSA9PSBOVUxMKSB7CgkJdXNlX3NpbSA9IE1lYW5Tb2x1dGlvbl91c2Vfc2ltdWxhdGlvbjsK
CQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3Np
bSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBNZWFuU29sdXRpb25fc2ltdWxh
dGlvbl9sYXVuY2ggPSAwOwppbnQgTWVhblNvbHV0aW9uX3NpbXVsYXRvcl9zdGFydCh2b2lkKQp7
CglpbnQgcmV0dmFsID0gMDsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBNZWFuU29sdXRpb25fY2hl
Y2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEw
MjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFY
MzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBv
cGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAi
IDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJy
b3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVf
ZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1h
bmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIo
YnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9
Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgTWVhblNvbHV0aW9u
X3NpbXVsYXRvcl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBNZWFuU29sdXRp
b25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1
ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMg
LWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgc3RvcCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9
IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZm
LCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRf
ZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBp
cGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNv
bW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCTsKCX0KCXBj
bG9zZShwaXBlX2ZwKTsKCXJldHVybiAwOwp9CgpzdGF0aWMgdm9pZCBNZWFuU29sdXRpb25fc3Rh
dGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gTWVhblNvbHV0aW9uX2luaXQoKTsK
CWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBOVUxMIHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVy
cm9ycykpIHsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJ
CWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9
CglpZighbWF4X29rKG1heF9nbG9iYWxfZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2UobWF4X2dsb2JhbF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlm
KCFtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9P
Tl9FUlJPUikpCgkJbWF4X2Vycm9yc19tb2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJ
dGltZV90IHRpbWVvdXRfcHJldmlvdXMgPSBtYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxl
LCAzMCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gTWVhblNvbHV0aW9uX2NoZWNrX3VzZV9zaW11
bGF0aW9uKCk7CglpZiAobWF4X3BpbmdfZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9
PSAwKSB7CgkJaW50IHNpbV9zdGF0ID0gTWVhblNvbHV0aW9uX3NpbXVsYXRvcl9zdGFydCgpOwoJ
CWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwg
dXNlX3NpbSkgPT0gMSkpIHsKCQkJTWVhblNvbHV0aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMTsK
CQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0
cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1Y3R1cmUgYXV0b21hdGljYWxs
eS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAndXNlX3NpbXVsYXRpb249PHNp
bXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3VyIFNMaUMgY29uZmlndXJhdGlv
biIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUgYXNzb2NpYXRlZCBzaW11bGF0
ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfQoJfQoJc3Rv
cmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2so
c3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRl
cnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZs
dXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9m
cmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47
CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZp
b3VzKTsKfQp2b2lkIE1lYW5Tb2x1dGlvbl9mcmVlKHZvaWQpCnsKCWlmIChzdG9yZWRfZW5naW5l
ICE9IE5VTEwpIHsKCQltYXhfdW5sb2FkKHN0b3JlZF9lbmdpbmUpOwoJCXN0b3JlZF9lbmdpbmUg
PSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpIHsKCQltYXhfZmlsZV9mcmVl
KHN0b3JlZF9tYXhmaWxlKTsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVk
X2Vycm9yICE9IE5VTEwpIHsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJc3RvcmVkX2Vycm9yID0g
TlVMTDsKCX0KCWlmIChNZWFuU29sdXRpb25fc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWlu
dCBzaW1fc3RhdCA9IE1lYW5Tb2x1dGlvbl9zaW11bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1fc3Rh
dCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3BwaW5nIHNpbXVsYXRvci4i
KTsKCQl9CgkJTWVhblNvbHV0aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKCX0KfQoKc3RhdGlj
IGludCBNZWFuU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIE1lYW5T
b2x1dGlvbl9QQ0lFX0FMSUdOTUVOVAoJcmV0dXJuICgoTWVhblNvbHV0aW9uX1BDSUVfQUxJR05N
RU5UIDwgMSkgPyAxNiA6IE1lYW5Tb2x1dGlvbl9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1
cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IE1lYW5Tb2x1dGlvbl9jaGVja19hbGlnbmVkKGNv
bnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJfdCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0YTsK
CWludCBhbGlnbm1lbnQgPSBNZWFuU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KCk7CglyZXR1
cm4gKHBvaW50ZXIgJSBhbGlnbm1lbnQpID8gMSA6IDA7Cn0KCnN0YXRpYyB2b2lkICpNZWFuU29s
dXRpb25fbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWlu
dCBhbGlnbm1lbnQgPSBNZWFuU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KCk7Cglwb3NpeF9t
ZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0cjsKfQoKCgovKi0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNl
IGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNU
LT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5U
RVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJy
b3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4
X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tf
TlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAi
IiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0Up
OyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IE1lYW5Tb2x1dGlvbl9jYWxsYmFja19z
dHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVf
dCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gTWVhblNvbHV0aW9uX2NhbGxiYWNrX3N0
cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgTWVhblNvbHV0aW9uX2NhbGxiYWNrX2RhdGEgewoJTWVh
blNvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQg
bWF4X2NvdW50Owp9IE1lYW5Tb2x1dGlvbl9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBN
ZWFuU29sdXRpb25fY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJTWVhblNvbHV0
aW9uX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChNZWFuU29sdXRpb25fY2FsbGJhY2tfZGF0YV90
KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJ
CU1lYW5Tb2x1dGlvbl9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJ
aWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0
ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsK
CX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBNZWFuU29sdXRpb25fY29u
dmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglNZWFuU29sdXRpb25fYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoq
Y2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0
aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhf
b2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFj
ZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJTWVhblNvbHV0aW9uX2NhbGxi
YWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNr
X2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxi
YWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoTWVhblNvbHV0aW9uX2NhbGxiYWNrX2Rh
dGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFi
bGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlv
biBNZWFuU29sdXRpb25fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0K
CQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNh
bGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmTWVhblNv
bHV0aW9uX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDMyX3QgcGFyYW1fc2l6ZSA9IGludGVy
ZmFjZV9hY3Rpb25zLT5wYXJhbV9zaXplOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgTWVhblNvbHV0
aW9uS2VybmVsLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3NfTWVhblNvbHV0aW9u
S2VybmVsID0gcGFyYW1fc2l6ZTsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIk1lYW5Tb2x1dGlv
bktlcm5lbCIsIHBhcmFtX3NpemUpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9y
IHNjYWxhciBNZWFuU29sdXRpb25LZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJaW50NjRfdCB0
bXBfMCA9IChwYXJhbV9zaXplICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBpbkltYWdlICov
CglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pbkltYWdlID0gdG1wXzA7CglpZiAoaW5zdHJlYW1fc2l6
ZV9pbkltYWdlID4gMCkgewoJCWNvbnN0IGludDMyX3QgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2Vf
YWN0aW9ucy0+aW5zdHJlYW1faW5JbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IE1l
YW5Tb2x1dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbklt
YWdlKSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlID0gbWFsbG9jKGlu
c3RyZWFtX3NpemVfaW5JbWFnZSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UgPT0g
TlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxF
X18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9y
IHN0cmVhbSAnaW5JbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX2lu
SW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAg
ID0gaW5zdHJlYW1fc2l6ZV9pbkltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNw
eShhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9p
bkltYWdlLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9p
bnN0cmVhbV9pbkltYWdlOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImluSW1hZ2Ui
LCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCUNIRUNLX0VSUk9SUzsKCX0K
CS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5JbWFnZSAqLwoJCglpbnQ2NF90IHRtcF8xID0g
KHBhcmFtX3NpemUgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIG91dEltYWdlICovCglzaXpl
X3Qgb3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UgPSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6ZV9v
dXRJbWFnZSA+IDApIHsKCQlpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMt
Pm91dHN0cmVhbV9vdXRJbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IE1lYW5Tb2x1
dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fb3V0SW1hZ2Up
KSkgewoJCQlpbnQzMl90ICphbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZSA9IG1hbGxvYyhvdXRz
dHJlYW1fc2l6ZV9vdXRJbWFnZSk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZSA9
PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJ
TEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBm
b3Igc3RyZWFtICdvdXRJbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50
ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRJbWFnZTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1b
Y2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0c3Ry
ZWFtX291dEltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXpl
ICAgICAgICA9IG91dHN0cmVhbV9zaXplX291dEltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtj
Yl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7
CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZTsKCQl9CgkJbWF4X3F1
ZXVlX291dHB1dChhY3Rpb25zLCAib3V0SW1hZ2UiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6
ZV9vdXRJbWFnZSk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVh
bSBvdXRJbWFnZSAqLwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNvdW50ID09IDAp
IHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZy
ZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2
b2lkIE1lYW5Tb2x1dGlvbigKCWludDMyX3QgcGFyYW1fc2l6ZSwKCWNvbnN0IGludDMyX3QgKmlu
c3RyZWFtX2luSW1hZ2UsCglpbnQzMl90ICpvdXRzdHJlYW1fb3V0SW1hZ2UpCnsKCSh2b2lkKSBw
dGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIE1lYW5Tb2x1dGlvbl9zdGF0aWNf
aW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRl
ZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IE1lYW5Tb2x1dGlvbl9ub25ibG9jayhwYXJhbV9zaXpl
LCBpbnN0cmVhbV9pbkltYWdlLCBvdXRzdHJlYW1fb3V0SW1hZ2UpOwoJQ0hFQ0tfTlVMTChydW4s
ICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90
ICpNZWFuU29sdXRpb25fbm9uYmxvY2soCglpbnQzMl90IHBhcmFtX3NpemUsCgljb25zdCBpbnQz
Ml90ICppbnN0cmVhbV9pbkltYWdlLAoJaW50MzJfdCAqb3V0c3RyZWFtX291dEltYWdlKQp7CglN
ZWFuU29sdXRpb25fYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fc2l6ZSA9IHBhcmFtX3NpemU7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9p
bkltYWdlID0gaW5zdHJlYW1faW5JbWFnZTsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV9v
dXRJbWFnZSA9IG91dHN0cmVhbV9vdXRJbWFnZTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIE1lYW5Tb2x1dGlvbl9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxM
KHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAo
KmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsK
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNZWFuU29sdXRpb25fY29udmVydF9pbnRlcm5hbChz
dG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEp
OwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsK
CW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsK
CUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJ
aWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3RvcmVkX2Vu
Z2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9j
YihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05V
TEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qo
YWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsK
fQoKdm9pZCBNZWFuU29sdXRpb25fcnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglNZWFuU29s
dXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBN
ZWFuU29sdXRpb25fcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hF
Q0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsK
fQoKbWF4X3J1bl90ICpNZWFuU29sdXRpb25fcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2luZV90ICpl
bmdpbmUsCglNZWFuU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4
X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9p
ZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVM
TDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNZWFuU29sdXRpb25fY29udmVydF9pbnRlcm5h
bChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNI
RUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhf
dmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhf
cnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJs
b2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tf
d2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVM
TChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUo
YWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5j
ZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxw
YXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFj
ZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZp
cnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBNZWFuU29sdXRpb25f
cnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgTWVhblNvbHV0aW9uX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gTWVhblNvbHV0aW9uX3J1bl9ncm91
cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJp
ZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRo
ZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8g
cnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJu
IGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdp
dGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hp
Yml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjpt
YXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24u
CiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50
ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhl
IGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJv
ci4KICovCm1heF9ydW5fdCAqTWVhblNvbHV0aW9uX3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3Jv
dXBfdCAqZ3JvdXAsIE1lYW5Tb2x1dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7Cglt
YXhfYWN0aW9uc190ICphY3Rpb25zID0gTWVhblNvbHV0aW9uX2NvbnZlcnRfaW50ZXJuYWwobWF4
ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBO
VUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5V
TEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fZ3Jv
dXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsK
CXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMg
ZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0g
ZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0g
aW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4g
dGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVuZ3Ro
IG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXku
CiAqLwp2b2lkIE1lYW5Tb2x1dGlvbl9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5
LCBNZWFuU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVu
X3QgKnJ1biA9IE1lYW5Tb2x1dGlvbl9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVy
ZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwg
KTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4K
ICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJy
YXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBp
bnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUg
c3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3Ig
OjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQs
IHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0g
W2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5d
IGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVy
biBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVM
TCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpNZWFuU29sdXRpb25fcnVuX2FycmF5
X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgTWVhblNvbHV0aW9uX2FjdGlvbnNf
dCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdh
cnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXksIDApOwoJaW50IGk7CgltYXhfYWN0YXJyYXlfdCAq
YWN0YXJyYXkgPSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxlLCBlbmdhcnJheS0+c2l6ZSk7Cglp
ZiAoYWN0YXJyYXkgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgltYXhfYWN0aW9uc190ICoqYXJyX2Fj
dGlvbnMgPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCopKTsK
CWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplOyBpKysgKSB7CgkJbWF4X2FjdGlvbnNf
dCAqYWN0aW9ucyA9IE1lYW5Tb2x1dGlvbl9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSBy
ZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24o
YWN0YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5
X25vbmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJh
eS0+c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1h
eF9hY3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1
bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBz
dHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgog
KiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkg
b3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2lu
XSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2Fj
dGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBU
aGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBl
cnJvci4KICovCm1heF9hY3Rpb25zX3QqIE1lYW5Tb2x1dGlvbl9jb252ZXJ0KG1heF9maWxlX3Qg
Km1heGZpbGUsIE1lYW5Tb2x1dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cgly
ZXR1cm4gTWVhblNvbHV0aW9uX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2Fj
dGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBD
SEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 44, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MeanSolutionKernel, 56, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02143e0f19288268217d683a904abc4e46f6cf124d4102144e939041fb26f1ff9637543f8eb1f3bbcb97796f")
#endif

